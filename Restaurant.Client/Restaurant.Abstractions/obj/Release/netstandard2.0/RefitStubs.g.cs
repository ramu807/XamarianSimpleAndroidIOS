// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Threading.Tasks;
using Refit;
using Restaurant.Abstractions.DataTransferObjects;
using System.IO;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace Restaurant.Abstractions.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace Restaurant.Abstractions.Api
{
    using Restaurant.Abstractions.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAccountApi : IAccountApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAccountApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<UserDto> IAccountApi.GetUserInfo(string accessToken)
        {
            var arguments = new object[] { accessToken };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserInfo", new Type[] { typeof(string) });
            return (Task<UserDto>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<HttpResponseMessage> IAccountApi.Register(RegisterDto registerDto)
        {
            var arguments = new object[] { registerDto };
            var func = requestBuilder.BuildRestResultFuncForMethod("Register", new Type[] { typeof(RegisterDto) });
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<object> IAccountApi.LogOut()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("LogOut", new Type[] {  });
            return (Task<object>)func(Client, arguments);
        }
    }
}

namespace Restaurant.Abstractions.Api
{
    using Restaurant.Abstractions.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIFoodsApi : IFoodsApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIFoodsApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<IEnumerable<FoodDto>> IFoodsApi.GetFoods(int count, int skip)
        {
            var arguments = new object[] { count, skip };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFoods", new Type[] { typeof(int), typeof(int) });
            return (Task<IEnumerable<FoodDto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<FoodDto> IFoodsApi.GetFood(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFood", new Type[] { typeof(Guid) });
            return (Task<FoodDto>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IFoodsApi.Create(FoodDto food)
        {
            var arguments = new object[] { food };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(FoodDto) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IFoodsApi.UploadFile(Stream file, string foodId)
        {
            var arguments = new object[] { file, foodId };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadFile", new Type[] { typeof(Stream), typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IFoodsApi.Update(Guid id, FoodDto food)
        {
            var arguments = new object[] { id, food };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(Guid), typeof(FoodDto) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IFoodsApi.Remove(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Remove", new Type[] { typeof(Guid) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Restaurant.Abstractions.Api
{
    using Restaurant.Abstractions.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIOrdersApi : IOrdersApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIOrdersApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<IEnumerable<OrderDto>> IOrdersApi.GetAll()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAll", new Type[] {  });
            return (Task<IEnumerable<OrderDto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IOrdersApi.Create(OrderDto dto)
        {
            var arguments = new object[] { dto };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(OrderDto) });
            return (Task)func(Client, arguments);
        }
    }
}
